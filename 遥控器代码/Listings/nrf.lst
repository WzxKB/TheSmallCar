C51 COMPILER V9.54   NRF                                                                   10/08/2022 21:07:13 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE NRF
OBJECT MODULE PLACED IN .\Objects\nrf.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE bsp\src\nrf.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\app\src;.\bsp\inc;.\bsp\
                    -src) DEBUG OBJECTEXTEND PRINT(.\Listings\nrf.lst) TABS(2) OBJECT(.\Objects\nrf.obj)

line level    source

   1          #include "bsp.h"
   2          
   3          
   4          u8  tx_buf[TX_PLOAD_WIDTH];
   5          
   6          u8 code TX_ADDRESS[TX_ADR_WIDTH]  = {0x34,0x43,0x10,0x10,0x01}; // Define a static TX address
   7          void NRF_Init(void)
   8          {
   9   1        CE=0;       // chip enable
  10   1        CSN=1;      // Spi disable  
  11   1        SCK=1;      // Spi clock line init high
  12   1      }
  13          
  14          /**************************************************
  15          Function: SPI_RW();
  16          
  17          Description:
  18            Writes one byte to nRF24L01, and return the byte read
  19            from nRF24L01 during write, according to SPI protocol
  20          /**************************************************/
  21          u8 SPI_RW(u8 byte)
  22          {
  23   1        u8 bit_ctr;
  24   1          for(bit_ctr=0;bit_ctr<8;bit_ctr++)   // output 8-bit
  25   1          {
  26   2            MOSI = (byte & 0x80);         // output 'byte', MSB to MOSI
  27   2            byte = (byte << 1);           // shift next bit into MSB..
  28   2            SCK = 1;                      // Set SCK high..
  29   2            byte |= MISO;             // capture current MISO bit
  30   2            SCK = 0;                  // ..then set SCK low again
  31   2          }
  32   1          return(byte);                 // return read byte
  33   1      }
  34          /**************************************************/
  35          
  36          /**************************************************
  37          Function: SPI_RW_Reg();
  38          
  39          Description:
  40            Writes value 'value' to register 'reg'
  41          /**************************************************/
  42          u8 SPI_RW_Reg(u8 reg, u8 value)
  43          {
  44   1        u8 status;
  45   1      
  46   1          CSN = 0;                   // CSN low, init SPI transaction
  47   1          status = SPI_RW(reg);      // select register
  48   1          SPI_RW(value);             // ..and write value to it..
  49   1          CSN = 1;                   // CSN high again
  50   1      
  51   1          return(status);            // return nRF24L01 status byte
  52   1      }
  53          /**************************************************/
  54          
C51 COMPILER V9.54   NRF                                                                   10/08/2022 21:07:13 PAGE 2   

  55          /**************************************************
  56          Function: SPI_Read();
  57          
  58          Description:
  59            Read one byte from nRF24L01 register, 'reg'
  60          /**************************************************/
  61          u8 SPI_Read(u8 reg)
  62          {
  63   1        u8 reg_val;
  64   1      
  65   1          CSN = 0;                // CSN low, initialize SPI communication...
  66   1          SPI_RW(reg);            // Select register to read from..
  67   1          reg_val = SPI_RW(0);    // ..then read registervalue
  68   1          CSN = 1;                // CSN high, terminate SPI communication
  69   1      
  70   1          return(reg_val);        // return register value
  71   1      }
  72          /**************************************************/
  73          
  74          /**************************************************
  75          Function: SPI_Read_Buf();
  76          
  77          Description:
  78            Reads 'bytes' #of bytes from register 'reg'
  79            Typically used to read RX payload, Rx/Tx address
  80          /**************************************************/
  81          u8 SPI_Read_Buf(u8 reg, u8 *pBuf, u8 bytes)
  82          {
  83   1        u8 status,byte_ctr;
  84   1      
  85   1          CSN = 0;                        // Set CSN low, init SPI tranaction
  86   1          status = SPI_RW(reg);           // Select register to write to and read status byte
  87   1      
  88   1          for(byte_ctr=0;byte_ctr<bytes;byte_ctr++)
  89   1            pBuf[byte_ctr] = SPI_RW(0);    // Perform SPI_RW to read byte from nRF24L01
  90   1      
  91   1          CSN = 1;                           // Set CSN high again
  92   1      
  93   1          return(status);                    // return nRF24L01 status byte
  94   1      }
  95          /**************************************************/
  96          
  97          /**************************************************
  98          Function: SPI_Write_Buf();
  99          
 100          Description:
 101            Writes contents of buffer '*pBuf' to nRF24L01
 102            Typically used to write TX payload, Rx/Tx address
 103          /**************************************************/
 104          u8 SPI_Write_Buf(u8 reg, u8 *pBuf, u8 bytes)
 105          {
 106   1        u8 status,byte_ctr;
 107   1      
 108   1          CSN = 0;                   // Set CSN low, init SPI tranaction
 109   1          status = SPI_RW(reg);    // Select register to write to and read status byte
 110   1          for(byte_ctr=0; byte_ctr<bytes; byte_ctr++) // then write all byte in buffer(*pBuf)
 111   1            SPI_RW(*pBuf++);
 112   1          CSN = 1;                 // Set CSN high again
 113   1          return(status);          // return nRF24L01 status byte
 114   1      }
 115          /**************************************************/
 116          
C51 COMPILER V9.54   NRF                                                                   10/08/2022 21:07:13 PAGE 3   

 117          /**************************************************
 118          Function: RX_Mode();
 119          
 120          Description:
 121            This function initializes one nRF24L01 device to
 122            RX Mode, set RX address, writes RX payload width,
 123            select RF channel, datarate & LNA HCURR.
 124            After init, CE is toggled high, which means that
 125            this device is now ready to receive a datapacket.
 126          /**************************************************/
 127          void RX_Mode(void)
 128          {
 129   1        CE=0;
 130   1          SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 131   1          SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // Use the same address on the RX devi
             -ce as the TX device
 132   1      
 133   1          SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 134   1          SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 135   1          SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 136   1          SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); // Select same RX payload width as TX Payload width
 137   1          SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 138   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:RX. RX_DR enabl
             -ed..
 139   1      
 140   1          CE = 1; // Set CE pin high to enable RX device
 141   1      }
 142          /**************************************************/
 143          
 144          /**************************************************
 145          Function: TX_Mode();
 146          
 147          Description:
 148            This function initializes one nRF24L01 device to
 149            TX mode, set TX address, set RX address for auto.ack,
 150            fill TX payload, select RF channel, datarate & TX pwr.
 151            PWR_UP is set, CRC(2 bytes) is enabled, & PRIM:TX.
 152          
 153            ToDo: One high pulse(>10us) on CE will now send this
 154            packet and expext an acknowledgment from the RX device.
 155          /**************************************************/
 156          void TX_Mode(void)
 157          {
 158   1        CE = 0;
 159   1        
 160   1          SPI_RW_Reg(FLUSH_TX, 0xff);
 161   1          
 162   1          SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
 163   1          SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ac
             -k
 164   1          SPI_RW_Reg(WRITE_REG + RX_PW_P0, TX_PLOAD_WIDTH); 
 165   1          SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
 166   1          SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  // Enable Pipe0
 167   1          SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x1a); // 500us + 86us, 10 retrans...
 168   1          SPI_RW_Reg(WRITE_REG + RF_CH, 40);        // Select RF channel 40
 169   1          SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:2Mbps, LNA:HCURR
 170   1          SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);     // Set PWR_UP bit, enable CRC(2 bytes) & Prim:TX. MAX_RT & TX
             -_DS enabled..
 171   1        CE=1;
 172   1      
 173   1      }
 174          
C51 COMPILER V9.54   NRF                                                                   10/08/2022 21:07:13 PAGE 4   

 175          
 176          /**
 177            * @brief NRF发送函数，将结构体发送出去 
 178            * @param  无
 179            * @retval 无
 180            */
 181          void NRF_Send(u8 SW1,u8 SW2,AnalogStick analogStick)  
 182          {   
 183   1        u8 sta;
 184   1        tx_buf[0]=SW1;
 185   1        tx_buf[1]=SW2;
 186   1        tx_buf[2]=analogStick.left;
 187   1        tx_buf[3]=analogStick.left>>8;
 188   1      
 189   1        tx_buf[4]=analogStick.middle;
 190   1        tx_buf[5]=analogStick.middle>>8;
 191   1      
 192   1        tx_buf[6]=analogStick.right;
 193   1        tx_buf[7]=analogStick.right>>8;
 194   1        
 195   1          CE = 0;
 196   1          SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH); //将数据送入发射缓冲区
 197   1      
 198   1          CE = 1;   
 199   1          while(IRQ);   
 200   1          sta=SPI_Read(STATUS); 
 201   1          
 202   1          SPI_RW_Reg(FLUSH_TX, 0xff);                         //清除发射缓冲区
 203   1          SPI_RW_Reg(WRITE_REG+STATUS,0xff);                    //清除各种中断标志
 204   1        
 205   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    365    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
